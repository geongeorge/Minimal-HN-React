{"version":3,"sources":["api/api.js","components/utils/Nav.js","components/utils/PostItem.js","components/Pages/List.js","components/App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","storyTypes","getStories","type","Promise","resolve","reject","includes","thisStory","get","then","res","stories","data","catch","e","console","log","NavLink","props","getProps","className","isCurrent","Nav","useState","typeList","setTypeList","useEffect","types","map","el","text","charAt","toUpperCase","slice","link","val","index","key","to","PostItem","postData","setPostData","loaded","setLoaded","postid","isSubscribed","story","id","Object","keys","length","div","variants","open","y","opacity","transition","stiffness","velocity","closed","whileHover","scale","boxShadow","whileTap","url","href","title","icon","by","moment","unix","time","fromNow","kids","score","List","isOpen","setOpen","isLoaded","posts","setPosts","a","typeOfStory","fetchData","override","css","initial","animate","staggerChildren","delayChildren","staggerDirection","value","toString","size","color","loading","App","path","Boolean","window","location","hostname","match","library","add","fab","fas","far","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.35d04f3f.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://hacker-news.firebaseio.com/v0/',\n    // timeout: 1000,\n    // headers: {'X-Custom-Header': 'foobar'}\n  });\n\nconst storyTypes = [\"top\",\"show\",\"ask\",\"job\"]\n\nfunction getStories(type = storyTypes[0]) {\n    return new Promise((resolve,reject)=>{\n        \n        if(!storyTypes.includes(type)) reject(\"Not relevent\")\n\n        let thisStory = \"/\"+type+\"stories.json\";\n\n        api.get(thisStory)\n        .then(res => {\n            const stories = res.data\n            resolve(stories)\n        }).catch((e)=>{\n            console.log(e)\n            reject(e)\n        })\n    })\n}\n\nfunction getPost(postid) {\n    return new Promise((resolve,reject)=>{\n        api.get(`/item/${postid}.json`)\n      .then(res => {\n        const stories = res.data\n        resolve(stories)\n      }).catch((e)=>{\n          console.log(e)\n          reject(e)\n      })\n    })\n}\n\nexport {getStories,getPost,storyTypes}\n\n\n// get a post \n// https://hacker-news.firebaseio.com/v0/item/8863.json?print=pretty\n\n// get top stories \n// https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\n\n// get show hm stories \n// https://hacker-news.firebaseio.com/v0/showstories.json?print=pretty","import React,{useEffect,useState} from 'react';\nimport { Link, Match } from \"@reach/router\"\nimport {storyTypes} from '../../api/api'\n\nimport \"./Nav.css\"\n\nconst NavLink = props => (\n    <Link\n      {...props}\n      getProps={({ isCurrent }) => {\n        // the object returned here is passed to the\n        // anchor element's props\n        return {\n           className:  isCurrent ? \"font-bold underline\" : \"\"\n        };\n      }}\n    />\n  );\n\n\nexport default function Nav(props) {\n\n  const [typeList, setTypeList] = useState([])\n\n  useEffect(() => {\n    const types = storyTypes.map((el)=>{\n      let text = el.charAt(0).toUpperCase() + el.slice(1)\n      let link = el\n      if(el===\"top\") link = \"/\"\n      return {text,link}\n    })\n    setTypeList(types)\n  },[])\n  \n\n    return (\n        \n        <header className=\"App-header\">\n            <div className=\"bg-gray-200\">\n            <nav className=\"container p-4 mx-auto App-nav\">\n              {\n                typeList.map((val,index) => {\n                  return <NavLink key={index} to={val.link}>{val.text}</NavLink>\n                })\n              }\n            </nav>\n            <div>\n            </div>\n            </div>\n        </header>\n    )\n}","import React,{ useState, useEffect } from 'react';\nimport { motion } from \"framer-motion\"\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport {getPost} from '../../api/api'\n\nimport moment from 'moment'\n\nexport default function PostItem(props) {\n    const [postData, setPostData] = useState({})\n    const [loaded, setLoaded] = useState(false)\n\n    useEffect(() => {\n        let isSubscribed = true\n        console.log(props.story,isSubscribed,props.id)\n        getPost(props.id).then((data)=>{\n            if(isSubscribed) {\n                setPostData(data)\n            }\n        })\n        return () => isSubscribed = false\n      },[]);\n\n    useEffect(() => {\n        let isSubscribed = true\n        if(postData && Object.keys(postData).length>0) {\n            // loaded\n            if(isSubscribed)\n                setLoaded(true)\n            // console.log(postData)\n            // console.log(moment.unix(postData.time))\n        }\n        return () => isSubscribed = false\n    },[postData])\n\n\n    const item = {\n        open: {\n          y: 0,\n          opacity: 1,\n          transition: {\n            y: { stiffness: 1000, velocity: -100 }\n          }\n        },\n        closed: {\n          y: 50,\n          opacity: 0,\n          transition: {\n            y: { stiffness: 1000 }\n          }\n        }\n      };\n\n    return (\n        <div>\n        {loaded? (\n        <motion.div variants={item}\n        whileHover={{ scale: 1.01, boxShadow: \"0 1px 2px 0 rgba(0, 0, 0, 0.05)\" }}\n        whileTap={{ scale: 0.99 }}\n        className=\"border rounded p-2 mt-2\"\n        > \n        \n        <div className=\"w-full flex cursor-pointer group\">\n            <div className=\"flex-1\">\n                <div className=\"overflow-hidden\">\n                    {postData.url? (\n                    <a className=\"hover:underline\" href={postData.url} >\n                        {postData.title}\n                    </a>) : postData.title}\n                </div>\n                <div className=\"text-gray-500 flex flex-row justify-start mt-1 text-sm\">\n                    <div className=\"flex-0 mr-2\"><FontAwesomeIcon icon={['far','user']} className=\"text-gray-500\" /> {postData.by}</div> \n                    <div className=\"flex-0 mr-2\"><FontAwesomeIcon icon={['far','clock']} className=\"text-gray-500\" /> {moment.unix(postData.time).fromNow()}</div> \n                    <div className=\"flex-0\"><FontAwesomeIcon icon={['far','comments']} className=\"text-gray-500\" /> {postData.kids?postData.kids.length:\"0\"}</div>\n                </div>\n                {/* <div className=\"overflow-hidden text-xs text-gray-500\" >{postData.url}</div> */}\n            </div>\n            <div className=\"flex flex-col justify-center items-center px-2 text-3xl\">\n            <span>{postData.score} <FontAwesomeIcon icon='caret-up' className=\"text-gray-500\" /></span> \n            </div>\n        </div>\n        </motion.div> ): (<div\n        className=\"border rounded p-2 mt-2 h-12\"\n        ></div>)}\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\n\nimport PostItem from '../utils/PostItem'\nimport { motion , useCycle} from \"framer-motion\"\n\nimport { css } from \"@emotion/core\";\nimport BarLoader from \"react-spinners/BarLoader\";\n\nimport {getStories,storyTypes} from '../../api/api'\n\n\nexport default function List(props) {\n    const [isOpen, setOpen] = useState(false);\n    const [isLoaded, setLoaded] = useState(false);\n\n    const [posts,setPosts] = useState([]);\n\n    useEffect(() => {\n      let isSubscribed = true\n        async function fetchData() {\n          let typeOfStory = \"top\"\n\n            if(!props.story) {\n              typeOfStory = \"top\"\n            } else if(storyTypes.includes(props.story)) {\n              typeOfStory = props.story\n            } else {\n              //404 here\n            }\n            const stories = await getStories(typeOfStory);\n            if(isSubscribed) {\n                setPosts(stories)\n                setLoaded(true)\n            }\n            \n            // animate\n            \n        }\n        // Update the document title using the browser API\n        fetchData()\n\n        return () => isSubscribed = false\n        \n      },[]);\n\n      useEffect(() => {\n        if(posts.length>0) {\n          setOpen(true)\n        }\n      },[posts])\n\n      const override = css`\n          display: block;\n          margin: 0 auto;\n        `;\n\n      const variants = {\n        open: {\n          transition: { staggerChildren: 0.03, delayChildren: 0.2 }\n        },\n        closed: {\n          transition: { staggerChildren: 0.05, staggerDirection: -1 }\n        }\n      };\n    return (\n        <div key={props.story}>\n            {/* <div>{props.story}</div> */}\n            <motion.div\n              initial={false}\n            animate={isOpen ? \"open\" : \"closed\"}\n            variants={variants}\n            >\n            { posts.map((value, index) => {\n                return (\n                 <PostItem id={value} story={props.story} key={props.story+index.toString()}></PostItem>\n                )  \n            }) }\n            </motion.div>\n            <BarLoader\n          css={override}\n          size={150}\n          color={\"#123abc\"}\n          loading={!isLoaded}\n        />\n        </div>\n    );\n}\n\n","import React,{useState} from 'react';\nimport './App.css';\n\nimport { Router} from \"@reach/router\"\n\nimport Nav from './utils/Nav'\n\nimport List from './Pages/List'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Nav></Nav>\n      <div className=\"content-container container mx-auto px-4\">\n        <div>\n          <Router>\n            <List path=\"/\" />\n            <List path=\"/:story\" />\n          </Router>\n        </div>\n        \n      </div>\n    </div>\n  );\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/css/main.css'\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport {far} from '@fortawesome/free-regular-svg-icons';\n\nimport { faCheckSquare, faCoffee, caretSquareUp } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(fab, fas, far)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}